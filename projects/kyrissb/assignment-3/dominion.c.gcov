        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      360:    8:int compare(const void* a, const void* b) {
      360:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      360:   11:  if (*(int*)a < *(int*)b)
       96:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       24:  115:		  if (numPlayers == 2){ 
       12:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      108:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
       24:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       24:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       24:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       24:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      288:  214:  while (state->deckCount[player] > 0) {
      240:  215:    card = floor(Random() * state->deckCount[player]);
      240:  216:    newDeck[newDeckPos] = state->deck[player][card];
      240:  217:    newDeckPos++;
      840:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      600:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      240:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
      240:  224:    state->deck[player][i] = newDeck[i];
      240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       24:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       28:  320:int supplyCount(int card, struct gameState *state) {
       28:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       14:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       14:  326:  int count = 0;
        -:  327:
      114:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      100:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       54:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       40:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       15:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        1:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       14:  343:  return count;
        -:  344:}
        -:  345:
       17:  346:int whoseTurn(struct gameState *state) {
       17:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        8:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       83:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       83:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       83:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       83:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       83:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       83:  576:    state->deckCount[player]--;
       83:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       83:  580:  return 0;
        -:  581:}
        -:  582:
       32:  583:int getCost(int cardNumber)
        -:  584:{
       32:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        5:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        3:  647:int adventurerCard(struct gameState *state)
        -:  648:{
        -:  649: 
        3:  650:  int drawntreasure=0;
        -:  651:  int temphand[MAX_HAND];
        3:  652:  int currentPlayer = whoseTurn(state);
        -:  653:  int cardDrawn;
        3:  654:  int z = 0;// this is the counter for the temp hand
        -:  655:
        -:  656:  // REFACTOR: Flipped < to >. This subtly alters the game in a way that might not be immediately obvious
        -:  657:  // without testing against correct expected results by allowing the palyer to draw cards until 3 treausures
        -:  658:  // are found rahter than 2.
        6:  659:  while(drawntreasure>2)
        -:  660:  {
    #####:  661:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  662:      shuffle(currentPlayer, state);
        -:  663:    }
        -:  664:
    #####:  665:    drawCard(currentPlayer, state);
    #####:  666:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  667:
    #####:  668:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  669:      drawntreasure++;
        -:  670:    else{
    #####:  671:      temphand[z]=cardDrawn;
        -:  672:
    #####:  673:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  674:    z++;
        -:  675:    }
        -:  676:  }
        6:  677:  while(z-1>=0){
    #####:  678:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  679:    z=z-1;
        -:  680:  }
        3:  681:  return 0;
        -:  682:}
        -:  683:
        1:  684:int smithyCard(struct gameState *state, int handPos)
        -:  685:{
        -:  686:  int i;
        1:  687:  int currentPlayer = whoseTurn(state);
        -:  688:
        -:  689:  //+3 Cards
        -:  690:  // Refactor: Changed < to == in for loop. This cheats the player using the Smithy out of their cards since i
        -:  691:  // enters the loop while equal to 0, which is not equal to 3.
        1:  692:  for (i = 0; i == 3; i++)
        -:  693:  {
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:  }
        -:  696:      
        -:  697:  //discard card from hand
        1:  698:  discardCard(handPos, currentPlayer, state, 0);
        1:  699:  return 0;
        -:  700:}
        -:  701:
        2:  702:int villageCard(struct gameState *state, int handPos)
        -:  703:{
        -:  704:
        2:  705:  int currentPlayer = whoseTurn(state);
        -:  706:
        -:  707:  // REFACTOR: The dev forgot to call the drawCard function here, so the player doesn't get +1 card
        -:  708:  //+1 Card
        -:  709:  //drawCard(currentPlayer, state);
        -:  710:      
        -:  711:  //+2 Actions
        2:  712:  state->numActions = state->numActions + 2;
        -:  713:      
        -:  714:  //discard played card from hand
        2:  715:  discardCard(handPos, currentPlayer, state, 0);
        2:  716:  return 0;
        -:  717:}
        -:  718:
        3:  719:int stewardCard(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -:  720:{
        -:  721:
        3:  722:  int currentPlayer = whoseTurn(state);
        -:  723:
        3:  724:  if (choice1 == 1)
        -:  725:  {
        -:  726:    //+2 cards
        1:  727:    drawCard(currentPlayer, state);
        1:  728:    drawCard(currentPlayer, state);
        -:  729:  }
        2:  730:  else if (choice1 == 2)
        -:  731:  {
        -:  732:    //+2 coins
        1:  733:    state->coins = state->coins + 2;
        -:  734:  }
        -:  735:  else
        -:  736:  {
        -:  737:    //REFACTOR: Maybe the dev copied and pasted, but for this bug, the dev forgot to set the trash flag
        -:  738:    // to '1.' Because of this, the cards trashed by Steward get placed into the discard pile rather than
        -:  739:    // the trash and cycled back into the player's hand (so good for culling those coppers).
        -:  740:
        -:  741:    //trash 2 cards in hand
        1:  742:    discardCard(choice2, currentPlayer, state, 0);
        1:  743:    discardCard(choice3, currentPlayer, state, 0);
        -:  744:  }
        -:  745:      
        -:  746:  //discard card from hand
        3:  747:  discardCard(handPos, currentPlayer, state, 0);
        3:  748:  return 0;
        -:  749:}
        -:  750:
    #####:  751:int cutpurseCard(struct gameState *state, int handPos)
        -:  752:{
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
    #####:  756:  int currentPlayer = whoseTurn(state);
        -:  757:
    #####:  758:  updateCoins(currentPlayer, state, 2);
    #####:  759:  for (i = 0; i < state->numPlayers; i++)
        -:  760:  {
    #####:  761:    if (i != currentPlayer)
        -:  762:    {
    #####:  763:      for (j = 0; j < state->handCount[i]; j++)
        -:  764:      {
    #####:  765:        if (state->hand[i][j] == copper)
        -:  766:        {
    #####:  767:          discardCard(j, i, state, 0);
        -:  768:          // REFACTOR: This bug makes the cutpurse even meaner. I am pretty sure that the bug (forgetting the break)
        -:  769:          // will continue the discard loop so the target player discards all copper in his or her hand, then 
        -:  770:          // has to reveal the remaining cards.
        -:  771:          //break;
        -:  772:        }
    #####:  773:        if (j == state->handCount[i])
        -:  774:        {
    #####:  775:          for (k = 0; k < state->handCount[i]; k++)
        -:  776:          {
        -:  777:            if (DEBUG)
        -:  778:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  779:          } 
    #####:  780:          break;
        -:  781:        }   
        -:  782:      }          
        -:  783:    }       
        -:  784:  }       
        -:  785:      //discard played card from hand
    #####:  786:      discardCard(handPos, currentPlayer, state, 0);      
        -:  787:
    #####:  788:      return 0;
        -:  789:}
        -:  790:
        -:  791:
        -:  792:
        8:  793:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  794:{
        -:  795:  int i;
        -:  796:  int j;
        -:  797:  int k;
        -:  798:  int x;
        -:  799:  int index;
        8:  800:  int currentPlayer = whoseTurn(state);
        8:  801:  int nextPlayer = currentPlayer + 1;
        -:  802:
        8:  803:  int tributeRevealedCards[2] = {-1, -1};
        -:  804:  int temphand[MAX_HAND];// moved above the if statement
        -:  805:  //int drawntreasure=0; // Only used for Adventurer
        -:  806:  //int cardDrawn;
        -:  807:  //int z = 0;// this is the counter for the temp hand
        8:  808:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  809:    nextPlayer = 0;
        -:  810:  }
        -:  811:  
        -:  812:	
        -:  813:  //uses switch to select card and perform actions
        8:  814:  switch( card ) 
        -:  815:    {
        -:  816:    case adventurer:
        3:  817:      adventurerCard(state);
        -:  818:    /*************************************
        -:  819:      while(drawntreasure<2){
        -:  820:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  821:	  shuffle(currentPlayer, state);
        -:  822:	}
        -:  823:	drawCard(currentPlayer, state);
        -:  824:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  825:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  826:	  drawntreasure++;
        -:  827:	else{
        -:  828:	  temphand[z]=cardDrawn;
        -:  829:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  830:	  z++;
        -:  831:	}
        -:  832:      }
        -:  833:      while(z-1>=0){
        -:  834:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  835:	z=z-1;
        -:  836:      }
        -:  837:      return 0;
        -:  838:      **************************************/
        -:  839:			
        -:  840:    case council_room:
        -:  841:      //+4 Cards
       15:  842:      for (i = 0; i < 4; i++)
        -:  843:	{
       12:  844:	  drawCard(currentPlayer, state);
        -:  845:	}
        -:  846:			
        -:  847:      //+1 Buy
        3:  848:      state->numBuys++;
        -:  849:			
        -:  850:      //Each other player draws a card
        9:  851:      for (i = 0; i < state->numPlayers; i++)
        -:  852:	{
        6:  853:	  if ( i != currentPlayer )
        -:  854:	    {
        3:  855:	      drawCard(i, state);
        -:  856:	    }
        -:  857:	}
        -:  858:			
        -:  859:      //put played card in played card pile
        3:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
        3:  862:      return 0;
        -:  863:			
        -:  864:    case feast:
        -:  865:      //gain card with cost up to 5
        -:  866:      //Backup hand
    #####:  867:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  868:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  869:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  870:      }
        -:  871:      //Backup hand
        -:  872:
        -:  873:      //Update Coins for Buy
    #####:  874:      updateCoins(currentPlayer, state, 5);
    #####:  875:      x = 1;//Condition to loop on
    #####:  876:      while( x == 1) {//Buy one card
    #####:  877:	if (supplyCount(choice1, state) <= 0){
        -:  878:	  if (DEBUG)
        -:  879:	    printf("None of that card left, sorry!\n");
        -:  880:
        -:  881:	  if (DEBUG){
        -:  882:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  883:	  }
        -:  884:	}
    #####:  885:	else if (state->coins < getCost(choice1)){
    #####:  886:	  printf("That card is too expensive!\n");
        -:  887:
        -:  888:	  if (DEBUG){
        -:  889:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  890:	  }
        -:  891:	}
        -:  892:	else{
        -:  893:
        -:  894:	  if (DEBUG){
        -:  895:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  896:	  }
        -:  897:
    #####:  898:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  899:	  x = 0;//No more buying cards
        -:  900:
        -:  901:	  if (DEBUG){
        -:  902:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  903:	  }
        -:  904:
        -:  905:	}
        -:  906:      }     
        -:  907:
        -:  908:      //Reset Hand
    #####:  909:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  910:	state->hand[currentPlayer][i] = temphand[i];
    #####:  911:	temphand[i] = -1;
        -:  912:      }
        -:  913:      //Reset Hand
        -:  914:      			
    #####:  915:      return 0;
        -:  916:			
        -:  917:    case gardens:
    #####:  918:      return -1;
        -:  919:			
        -:  920:    case mine:
    #####:  921:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  922:
    #####:  923:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:		
    #####:  928:      if (choice2 > treasure_map || choice2 < curse)
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 2, currentPlayer);
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:			
    #####:  953:      return 0;
        -:  954:			
        -:  955:    case remodel:
    #####:  956:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  957:
    #####:  958:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  959:	{
    #####:  960:	  return -1;
        -:  961:	}
        -:  962:
    #####:  963:      gainCard(choice2, state, 0, currentPlayer);
        -:  964:
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:
        -:  968:      //discard trashed card
    #####:  969:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  970:	{
    #####:  971:	  if (state->hand[currentPlayer][i] == j)
        -:  972:	    {
    #####:  973:	      discardCard(i, currentPlayer, state, 0);			
    #####:  974:	      break;
        -:  975:	    }
        -:  976:	}
        -:  977:
        -:  978:
    #####:  979:      return 0;
        -:  980:		
        -:  981:    case smithy:
        1:  982:      smithyCard(state, handPos);
        -:  983:    /************************************************
        -:  984:      //+3 Cards
        -:  985:      for (i = 0; i < 3; i++)
        -:  986:	{
        -:  987:	  drawCard(currentPlayer, state);
        -:  988:	}
        -:  989:			
        -:  990:      //discard card from hand
        -:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:      return 0;
        -:  993:		***************************************************/
        -:  994:
        -:  995:    case village:
        2:  996:      villageCard(state, handPos);
        -:  997:    /**************************************************
        -:  998:      //+1 Card
        -:  999:      drawCard(currentPlayer, state);
        -: 1000:			
        -: 1001:      //+2 Actions
        -: 1002:      state->numActions = state->numActions + 2;
        -: 1003:			
        -: 1004:      //discard played card from hand
        -: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:      return 0;
        -: 1007:    **************************************************/
        -: 1008:
        -: 1009:		
        -: 1010:    case baron:
        2: 1011:      state->numBuys++;//Increase buys by 1!
        2: 1012:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1013:	int p = 0;//Iterator for hand!
    #####: 1014:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1015:	while(card_not_discarded){
    #####: 1016:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1017:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1018:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1019:	    state->discardCount[currentPlayer]++;
    #####: 1020:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1021:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1022:	    }
    #####: 1023:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1024:	    state->handCount[currentPlayer]--;
    #####: 1025:	    card_not_discarded = 0;//Exit the loop
        -: 1026:	  }
    #####: 1027:	  else if (p > state->handCount[currentPlayer]){
        -: 1028:	    if(DEBUG) {
        -: 1029:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1030:	      printf("Must gain an estate if there are any\n");
        -: 1031:	    }
    #####: 1032:	    if (supplyCount(estate, state) > 0){
    #####: 1033:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1034:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1035:	      if (supplyCount(estate, state) == 0){
    #####: 1036:		isGameOver(state);
        -: 1037:	      }
        -: 1038:	    }
    #####: 1039:	    card_not_discarded = 0;//Exit the loop
        -: 1040:	  }
        -: 1041:			    
        -: 1042:	  else{
    #####: 1043:	    p++;//Next card
        -: 1044:	  }
        -: 1045:	}
        -: 1046:      }
        -: 1047:			    
        -: 1048:      else{
        2: 1049:	if (supplyCount(estate, state) > 0){
        2: 1050:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2: 1051:	  state->supplyCount[estate]--;//Decrement Estates
        2: 1052:	  if (supplyCount(estate, state) == 0){
    #####: 1053:	    isGameOver(state);
        -: 1054:	  }
        -: 1055:	}
        -: 1056:      }
        -: 1057:	    
        -: 1058:      
        2: 1059:      return 0;
        -: 1060:		
        -: 1061:    case great_hall:
        -: 1062:      //+1 Card
    #####: 1063:      drawCard(currentPlayer, state);
        -: 1064:			
        -: 1065:      //+1 Actions
    #####: 1066:      state->numActions++;
        -: 1067:			
        -: 1068:      //discard card from hand
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case minion:
        -: 1073:      //+1 action
    #####: 1074:      state->numActions++;
        -: 1075:			
        -: 1076:      //discard card from hand
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
        -: 1078:			
    #####: 1079:      if (choice1)		//+2 coins
        -: 1080:	{
    #####: 1081:	  state->coins = state->coins + 2;
        -: 1082:	}
        -: 1083:			
    #####: 1084:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1085:	{
        -: 1086:	  //discard hand
    #####: 1087:	  while(numHandCards(state) > 0)
        -: 1088:	    {
    #####: 1089:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1090:	    }
        -: 1091:				
        -: 1092:	  //draw 4
    #####: 1093:	  for (i = 0; i < 4; i++)
        -: 1094:	    {
    #####: 1095:	      drawCard(currentPlayer, state);
        -: 1096:	    }
        -: 1097:				
        -: 1098:	  //other players discard hand and redraw if hand size > 4
    #####: 1099:	  for (i = 0; i < state->numPlayers; i++)
        -: 1100:	    {
    #####: 1101:	      if (i != currentPlayer)
        -: 1102:		{
    #####: 1103:		  if ( state->handCount[i] > 4 )
        -: 1104:		    {
        -: 1105:		      //discard hand
    #####: 1106:		      while( state->handCount[i] > 0 )
        -: 1107:			{
    #####: 1108:			  discardCard(handPos, i, state, 0);
        -: 1109:			}
        -: 1110:							
        -: 1111:		      //draw 4
    #####: 1112:		      for (j = 0; j < 4; j++)
        -: 1113:			{
    #####: 1114:			  drawCard(i, state);
        -: 1115:			}
        -: 1116:		    }
        -: 1117:		}
        -: 1118:	    }
        -: 1119:				
        -: 1120:	}
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case steward:
        3: 1124:      stewardCard(state, choice1, choice2, choice3, handPos);
        -: 1125:
        -: 1126:  /*************************************************
        -: 1127:      if (choice1 == 1)
        -: 1128:	{
        -: 1129:	  //+2 cards
        -: 1130:	  drawCard(currentPlayer, state);
        -: 1131:	  drawCard(currentPlayer, state);
        -: 1132:	}
        -: 1133:      else if (choice1 == 2)
        -: 1134:	{
        -: 1135:	  //+2 coins
        -: 1136:	  state->coins = state->coins + 2;
        -: 1137:	}
        -: 1138:      else
        -: 1139:	{
        -: 1140:	  //trash 2 cards in hand
        -: 1141:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1142:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1143:	}
        -: 1144:			
        -: 1145:      //discard card from hand
        -: 1146:      discardCard(handPos, currentPlayer, state, 0);
        -: 1147:      return 0;
        -: 1148:  **************************************************/
        -: 1149:		
        -: 1150:    case tribute:
        3: 1151:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1152:	if (state->deckCount[nextPlayer] > 0){
    #####: 1153:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1154:	  state->deckCount[nextPlayer]--;
        -: 1155:	}
    #####: 1156:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1157:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1158:	  state->discardCount[nextPlayer]--;
        -: 1159:	}
        -: 1160:	else{
        -: 1161:	  //No Card to Reveal
        -: 1162:	  if (DEBUG){
        -: 1163:	    printf("No cards to reveal\n");
        -: 1164:	  }
        -: 1165:	}
        -: 1166:      }
        -: 1167:	    
        -: 1168:      else{
        3: 1169:	if (state->deckCount[nextPlayer] == 0){
    #####: 1170:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1171:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1172:	    state->deckCount[nextPlayer]++;
    #####: 1173:	    state->discard[nextPlayer][i] = -1;
    #####: 1174:	    state->discardCount[nextPlayer]--;
        -: 1175:	  }
        -: 1176:			    
    #####: 1177:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1178:	} 
        3: 1179:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        3: 1180:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        3: 1181:	state->deckCount[nextPlayer]--;
        3: 1182:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        3: 1183:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        3: 1184:	state->deckCount[nextPlayer]--;
        -: 1185:      }    
        -: 1186:		       
        3: 1187:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1188:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1189:	state->playedCardCount++;
    #####: 1190:	tributeRevealedCards[1] = -1;
        -: 1191:      }
        -: 1192:
       12: 1193:      for (i = 0; i <= 2; i ++){
        9: 1194:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        3: 1195:	  state->coins += 2;
        -: 1196:	}
        -: 1197:		    
        6: 1198:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        3: 1199:	  drawCard(currentPlayer, state);
        3: 1200:	  drawCard(currentPlayer, state);
        -: 1201:	}
        -: 1202:	else{//Action Card
        3: 1203:	  state->numActions = state->numActions + 2;
        -: 1204:	}
        -: 1205:      }
        -: 1206:	    
        3: 1207:      return 0;
        -: 1208:		
        -: 1209:    case ambassador:
    #####: 1210:      j = 0;		//used to check if player has enough cards to discard
        -: 1211:
    #####: 1212:      if (choice2 > 2 || choice2 < 0)
        -: 1213:	{
    #####: 1214:	  return -1;				
        -: 1215:	}
        -: 1216:
    #####: 1217:      if (choice1 == handPos)
        -: 1218:	{
    #####: 1219:	  return -1;
        -: 1220:	}
        -: 1221:
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1225:	    {
    #####: 1226:	      j++;
        -: 1227:	    }
        -: 1228:	}
    #####: 1229:      if (j < choice2)
        -: 1230:	{
    #####: 1231:	  return -1;				
        -: 1232:	}
        -: 1233:
        -: 1234:      if (DEBUG) 
        -: 1235:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1236:
        -: 1237:      //increase supply count for choosen card by amount being discarded
    #####: 1238:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1239:			
        -: 1240:      //each other player gains a copy of revealed card
    #####: 1241:      for (i = 0; i < state->numPlayers; i++)
        -: 1242:	{
    #####: 1243:	  if (i != currentPlayer)
        -: 1244:	    {
    #####: 1245:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1246:	    }
        -: 1247:	}
        -: 1248:
        -: 1249:      //discard played card from hand
    #####: 1250:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1251:
        -: 1252:      //trash copies of cards returned to supply
    #####: 1253:      for (j = 0; j < choice2; j++)
        -: 1254:	{
    #####: 1255:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1256:	    {
    #####: 1257:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1258:		{
    #####: 1259:		  discardCard(i, currentPlayer, state, 1);
    #####: 1260:		  break;
        -: 1261:		}
        -: 1262:	    }
        -: 1263:	}			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:		
        -: 1267:    case cutpurse:
    #####: 1268:      cutpurseCard(state, handPos);
        -: 1269:
        -: 1270:    /**************************************************
        -: 1271:      updateCoins(currentPlayer, state, 2);
        -: 1272:      for (i = 0; i < state->numPlayers; i++)
        -: 1273:	{
        -: 1274:	  if (i != currentPlayer)
        -: 1275:	    {
        -: 1276:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1277:		{
        -: 1278:		  if (state->hand[i][j] == copper)
        -: 1279:		    {
        -: 1280:		      discardCard(j, i, state, 0);
        -: 1281:		      break;
        -: 1282:		    }
        -: 1283:		  if (j == state->handCount[i])
        -: 1284:		    {
        -: 1285:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1286:			{
        -: 1287:			  if (DEBUG)
        -: 1288:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1289:			}	
        -: 1290:		      break;
        -: 1291:		    }		
        -: 1292:		}
        -: 1293:					
        -: 1294:	    }
        -: 1295:				
        -: 1296:	}				
        -: 1297:
        -: 1298:      //discard played card from hand
        -: 1299:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1300:
        -: 1301:      return 0;
        -: 1302:  *****************************************************/
        -: 1303:
        -: 1304:		
        -: 1305:    case embargo: 
        -: 1306:      //+2 Coins
    #####: 1307:      state->coins = state->coins + 2;
        -: 1308:			
        -: 1309:      //see if selected pile is in play
    #####: 1310:      if ( state->supplyCount[choice1] == -1 )
        -: 1311:	{
    #####: 1312:	  return -1;
        -: 1313:	}
        -: 1314:			
        -: 1315:      //add embargo token to selected supply pile
    #####: 1316:      state->embargoTokens[choice1]++;
        -: 1317:			
        -: 1318:      //trash card
    #####: 1319:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1320:      return 0;
        -: 1321:		
        -: 1322:    case outpost:
        -: 1323:      //set outpost flag
    #####: 1324:      state->outpostPlayed++;
        -: 1325:			
        -: 1326:      //discard card
    #####: 1327:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1328:      return 0;
        -: 1329:		
        -: 1330:    case salvager:
        -: 1331:      //+1 buy
    #####: 1332:      state->numBuys++;
        -: 1333:			
    #####: 1334:      if (choice1)
        -: 1335:	{
        -: 1336:	  //gain coins equal to trashed card
    #####: 1337:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1338:	  //trash card
    #####: 1339:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1340:	}
        -: 1341:			
        -: 1342:      //discard card
    #####: 1343:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1344:      return 0;
        -: 1345:		
        -: 1346:    case sea_hag:
    #####: 1347:      for (i = 0; i < state->numPlayers; i++){
    #####: 1348:	if (i != currentPlayer){
    #####: 1349:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1350:	  state->discardCount[i]++;
    #####: 1351:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1352:	}
        -: 1353:      }
    #####: 1354:      return 0;
        -: 1355:		
        -: 1356:    case treasure_map:
        -: 1357:      //search hand for another treasure_map
    #####: 1358:      index = -1;
    #####: 1359:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1360:	{
    #####: 1361:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1362:	    {
    #####: 1363:	      index = i;
    #####: 1364:	      break;
        -: 1365:	    }
        -: 1366:	}
    #####: 1367:      if (index > -1)
        -: 1368:	{
        -: 1369:	  //trash both treasure cards
    #####: 1370:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1371:	  discardCard(index, currentPlayer, state, 1);
        -: 1372:
        -: 1373:	  //gain 4 Gold cards
    #####: 1374:	  for (i = 0; i < 4; i++)
        -: 1375:	    {
    #####: 1376:	      gainCard(gold, state, 1, currentPlayer);
        -: 1377:	    }
        -: 1378:				
        -: 1379:	  //return success
    #####: 1380:	  return 1;
        -: 1381:	}
        -: 1382:			
        -: 1383:      //no second treasure_map found in hand
    #####: 1384:      return -1;
        -: 1385:    }
        -: 1386:	
    #####: 1387:  return -1;
        -: 1388:}
        -: 1389:
       11: 1390:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1391:{
        -: 1392:	
        -: 1393:  //if card is not trashed, added to Played pile 
       11: 1394:  if (trashFlag < 1)
        -: 1395:    {
        -: 1396:      //add card to played pile
       11: 1397:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1398:      state->playedCardCount++;
        -: 1399:    }
        -: 1400:	
        -: 1401:  //set played card to -1
       11: 1402:  state->hand[currentPlayer][handPos] = -1;
        -: 1403:	
        -: 1404:  //remove card from player's hand
       11: 1405:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1406:    {
        -: 1407:      //reduce number of cards in hand
    #####: 1408:      state->handCount[currentPlayer]--;
        -: 1409:    }
       11: 1410:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1411:    {
        -: 1412:      //reduce number of cards in hand
    #####: 1413:      state->handCount[currentPlayer]--;
        -: 1414:    }
        -: 1415:  else 	
        -: 1416:    {
        -: 1417:      //replace discarded card with last card in hand
       11: 1418:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1419:      //set last card to -1
       11: 1420:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1421:      //reduce number of cards in hand
       11: 1422:      state->handCount[currentPlayer]--;
        -: 1423:    }
        -: 1424:	
       11: 1425:  return 0;
        -: 1426:}
        -: 1427:
        2: 1428:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1429:{
        -: 1430:  //Note: supplyPos is enum of choosen card
        -: 1431:	
        -: 1432:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1433:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1434:    {
    #####: 1435:      return -1;
        -: 1436:    }
        -: 1437:	
        -: 1438:  //added card for [whoseTurn] current player:
        -: 1439:  // toFlag = 0 : add to discard
        -: 1440:  // toFlag = 1 : add to deck
        -: 1441:  // toFlag = 2 : add to hand
        -: 1442:
        2: 1443:  if (toFlag == 1)
        -: 1444:    {
    #####: 1445:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1446:      state->deckCount[player]++;
        -: 1447:    }
        2: 1448:  else if (toFlag == 2)
        -: 1449:    {
    #####: 1450:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1451:      state->handCount[player]++;
        -: 1452:    }
        -: 1453:  else
        -: 1454:    {
        2: 1455:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1456:      state->discardCount[player]++;
        -: 1457:    }
        -: 1458:	
        -: 1459:  //decrease number in supply pile
        2: 1460:  state->supplyCount[supplyPos]--;
        -: 1461:	 
        2: 1462:  return 0;
        -: 1463:}
        -: 1464:
       12: 1465:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1466:{
        -: 1467:  int i;
        -: 1468:	
        -: 1469:  //reset coin count
       12: 1470:  state->coins = 0;
        -: 1471:
        -: 1472:  //add coins for each Treasure card in player's hand
       72: 1473:  for (i = 0; i < state->handCount[player]; i++)
        -: 1474:    {
       60: 1475:      if (state->hand[player][i] == copper)
        -: 1476:	{
       48: 1477:	  state->coins += 1;
        -: 1478:	}
       12: 1479:      else if (state->hand[player][i] == silver)
        -: 1480:	{
    #####: 1481:	  state->coins += 2;
        -: 1482:	}
       12: 1483:      else if (state->hand[player][i] == gold)
        -: 1484:	{
    #####: 1485:	  state->coins += 3;
        -: 1486:	}	
        -: 1487:    }	
        -: 1488:
        -: 1489:  //add bonus
       12: 1490:  state->coins += bonus;
        -: 1491:
       12: 1492:  return 0;
        -: 1493:}
        -: 1494:
        -: 1495:
        -: 1496://end of dominion.c
        -: 1497:
